{"ast":null,"code":"var _jsxFileName = \"/Users/sparshs.pradhan/collaborative-editor/client/src/components/Editor.tsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n// import { useSocket } from '../context/SocketContext';\n// import CursorOverlay from './CursorOverlay';\n// import '../styles/Editor.css';\n\n// const Editor: React.FC = () => {\n//   const { documentState, updateContent, updateCursorPosition } = useSocket();\n//   const [content, setContent] = useState<string>('');\n//   const editorRef = useRef<HTMLDivElement>(null);\n\n//   // Update local content when document state changes\n//   useEffect(() => {\n//     if (documentState?.content && editorRef.current && documentState.content !== editorRef.current.innerText) {\n//       editorRef.current.innerText = documentState.content;\n//     }\n//   }, [documentState]);\n\n//   // Handle content changes\n//   const handleContentChange = (e: React.FormEvent<HTMLDivElement>) => {\n//     const newContent = e.currentTarget.innerText;\n//     setContent(newContent);\n//     updateContent(newContent);\n//   };\n\n//   // Track cursor position\n//   const handleCursorPosition = () => {\n//     const selection = window.getSelection();\n//     if (!selection || !selection.anchorNode || !editorRef.current) return;\n\n//     // Get the text up to the cursor\n//     const range = selection.getRangeAt(0);\n//     const preCaretRange = range.cloneRange();\n//     preCaretRange.selectNodeContents(editorRef.current);\n//     preCaretRange.setEnd(range.endContainer, range.endOffset);\n//     const textBeforeCaret = preCaretRange.toString();\n\n//     // Calculate line and character position\n//     const lines = textBeforeCaret.split('\\n');\n//     const line = lines.length - 1;\n//     const ch = lines[lines.length - 1].length;\n\n//     updateCursorPosition({ line, ch });\n//   };\n\n//   return (\n//     <div className=\"editor-container\">\n//       <div\n//         ref={editorRef}\n//         className=\"editor-area\"\n//         contentEditable={true}\n//         suppressContentEditableWarning={true}\n//         onInput={handleContentChange}\n//         onKeyUp={handleCursorPosition}\n//         onMouseUp={handleCursorPosition}\n//       />\n//       <CursorOverlay editorRef={editorRef} />\n//     </div>\n//   );\n// };\n\n// export default Editor;\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useSocket } from '../context/SocketContext';\nimport CursorOverlay from './CursorOverlay';\nimport '../styles/Editor.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Editor = () => {\n  _s();\n  const {\n    documentState,\n    updateContent,\n    updateCursorPosition,\n    users\n  } = useSocket();\n  const [content, setContent] = useState('');\n  const editorRef = useRef(null);\n\n  // Update local content when document state changes\n  useEffect(() => {\n    if (documentState !== null && documentState !== void 0 && documentState.content && editorRef.current && documentState.content !== editorRef.current.innerText) {\n      editorRef.current.innerText = documentState.content;\n    }\n  }, [documentState]);\n\n  // Handle content changes\n  const handleContentChange = e => {\n    const newContent = e.currentTarget.innerText;\n    setContent(newContent);\n    updateContent(newContent);\n  };\n\n  // Track cursor position\n  const handleCursorPosition = () => {\n    const selection = window.getSelection();\n    if (!selection || !selection.anchorNode || !editorRef.current) return;\n\n    // Get the text up to the cursor\n    const range = selection.getRangeAt(0);\n    const preCaretRange = range.cloneRange();\n    preCaretRange.selectNodeContents(editorRef.current);\n    preCaretRange.setEnd(range.endContainer, range.endOffset);\n    const textBeforeCaret = preCaretRange.toString();\n\n    // Calculate line and character position\n    const lines = textBeforeCaret.split('\\n');\n    const line = lines.length - 1;\n    const ch = lines[lines.length - 1].length;\n    updateCursorPosition({\n      line,\n      ch\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"editor-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: editorRef,\n      className: \"editor-area\",\n      contentEditable: true,\n      suppressContentEditableWarning: true,\n      onInput: handleContentChange,\n      onKeyUp: handleCursorPosition,\n      onMouseUp: handleCursorPosition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: users.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [user.name, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this), \" \", user.message]\n      }, user.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CursorOverlay, {\n      editorRef: editorRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(Editor, \"BZqUzoE3W8xlxBGciiggCRmSaVM=\", false, function () {\n  return [useSocket];\n});\n_c = Editor;\nexport default Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useSocket","CursorOverlay","jsxDEV","_jsxDEV","Editor","_s","documentState","updateContent","updateCursorPosition","users","content","setContent","editorRef","current","innerText","handleContentChange","e","newContent","currentTarget","handleCursorPosition","selection","window","getSelection","anchorNode","range","getRangeAt","preCaretRange","cloneRange","selectNodeContents","setEnd","endContainer","endOffset","textBeforeCaret","toString","lines","split","line","length","ch","className","children","ref","contentEditable","suppressContentEditableWarning","onInput","onKeyUp","onMouseUp","fileName","_jsxFileName","lineNumber","columnNumber","map","user","name","message","id","_c","$RefreshReg$"],"sources":["/Users/sparshs.pradhan/collaborative-editor/client/src/components/Editor.tsx"],"sourcesContent":["\n\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import { useSocket } from '../context/SocketContext';\n// import CursorOverlay from './CursorOverlay';\n// import '../styles/Editor.css';\n\n// const Editor: React.FC = () => {\n//   const { documentState, updateContent, updateCursorPosition } = useSocket();\n//   const [content, setContent] = useState<string>('');\n//   const editorRef = useRef<HTMLDivElement>(null);\n\n//   // Update local content when document state changes\n//   useEffect(() => {\n//     if (documentState?.content && editorRef.current && documentState.content !== editorRef.current.innerText) {\n//       editorRef.current.innerText = documentState.content;\n//     }\n//   }, [documentState]);\n\n//   // Handle content changes\n//   const handleContentChange = (e: React.FormEvent<HTMLDivElement>) => {\n//     const newContent = e.currentTarget.innerText;\n//     setContent(newContent);\n//     updateContent(newContent);\n//   };\n\n//   // Track cursor position\n//   const handleCursorPosition = () => {\n//     const selection = window.getSelection();\n//     if (!selection || !selection.anchorNode || !editorRef.current) return;\n\n//     // Get the text up to the cursor\n//     const range = selection.getRangeAt(0);\n//     const preCaretRange = range.cloneRange();\n//     preCaretRange.selectNodeContents(editorRef.current);\n//     preCaretRange.setEnd(range.endContainer, range.endOffset);\n//     const textBeforeCaret = preCaretRange.toString();\n\n//     // Calculate line and character position\n//     const lines = textBeforeCaret.split('\\n');\n//     const line = lines.length - 1;\n//     const ch = lines[lines.length - 1].length;\n\n//     updateCursorPosition({ line, ch });\n//   };\n\n//   return (\n//     <div className=\"editor-container\">\n//       <div\n//         ref={editorRef}\n//         className=\"editor-area\"\n//         contentEditable={true}\n//         suppressContentEditableWarning={true}\n//         onInput={handleContentChange}\n//         onKeyUp={handleCursorPosition}\n//         onMouseUp={handleCursorPosition}\n//       />\n//       <CursorOverlay editorRef={editorRef} />\n//     </div>\n//   );\n// };\n\n// export default Editor;\n\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useSocket } from '../context/SocketContext';\nimport CursorOverlay from './CursorOverlay';\nimport '../styles/Editor.css';\n\nconst Editor: React.FC = () => {\n  const { documentState, updateContent, updateCursorPosition, users } = useSocket();\n  const [content, setContent] = useState<string>('');\n  const editorRef = useRef<HTMLDivElement>(null);\n\n  // Update local content when document state changes\n  useEffect(() => {\n    if (documentState?.content && editorRef.current && documentState.content !== editorRef.current.innerText) {\n      editorRef.current.innerText = documentState.content;\n    }\n  }, [documentState]);\n\n  // Handle content changes\n  const handleContentChange = (e: React.FormEvent<HTMLDivElement>) => {\n    const newContent = e.currentTarget.innerText;\n    setContent(newContent);\n    updateContent(newContent);\n  };\n\n  // Track cursor position\n  const handleCursorPosition = () => {\n    const selection = window.getSelection();\n    if (!selection || !selection.anchorNode || !editorRef.current) return;\n\n    // Get the text up to the cursor\n    const range = selection.getRangeAt(0);\n    const preCaretRange = range.cloneRange();\n    preCaretRange.selectNodeContents(editorRef.current);\n    preCaretRange.setEnd(range.endContainer, range.endOffset);\n    const textBeforeCaret = preCaretRange.toString();\n\n    // Calculate line and character position\n    const lines = textBeforeCaret.split('\\n');\n    const line = lines.length - 1;\n    const ch = lines[lines.length - 1].length;\n\n    updateCursorPosition({ line, ch });\n  };\n\n  return (\n    <div className=\"editor-container\">\n      <div\n        ref={editorRef}\n        className=\"editor-area\"\n        contentEditable={true}\n        suppressContentEditableWarning={true}\n        onInput={handleContentChange}\n        onKeyUp={handleCursorPosition}\n        onMouseUp={handleCursorPosition}\n      />\n      {/* Display typed messages with usernames */}\n      <div className=\"messages-container\">\n        {users.map((user) => (\n          <div key={user.id} className=\"user-message\">\n            <strong>{user.name}:</strong> {user.message}\n          </div>\n        ))}\n      </div>\n      <CursorOverlay editorRef={editorRef} />\n    </div>\n  );\n};\n\nexport default Editor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}