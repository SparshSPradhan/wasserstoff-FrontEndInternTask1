{"ast":null,"code":"var _jsxFileName = \"/Users/sparshs.pradhan/collaborative-editor/client/src/context/SocketContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useContext, useEffect, useState } from 'react';\n// import io, { Socket } from 'socket.io-client';\n// import { User, DocumentState, ChatMessage, Change } from '../types';\n\n// interface SocketContextType {\n//   socket: Socket | null;\n//   isConnected: boolean;\n//   documentState: DocumentState | null;\n//   currentUser: User | null;\n//   users: User[];\n//   messages: ChatMessage[];\n//   changes: Change[];\n//   connectToServer: (username: string, color: string) => void;\n//   updateContent: (content: string) => void;\n//   updateCursorPosition: (position: { line: number; ch: number }) => void;\n//   sendMessage: (text: string) => void;\n// }\n\n// const defaultState: SocketContextType = {\n//   socket: null,\n//   isConnected: false,\n//   documentState: null,\n//   currentUser: null,\n//   users: [],\n//   messages: [],\n//   changes: [],\n//   connectToServer: () => {},\n//   updateContent: () => {},\n//   updateCursorPosition: () => {},\n//   sendMessage: () => {},\n// };\n\n// const SocketContext = createContext<SocketContextType>(defaultState);\n\n// export const useSocket = () => useContext(SocketContext);\n\n// export const SocketProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n//   const [socket, setSocket] = useState<Socket | null>(null);\n//   const [isConnected, setIsConnected] = useState(false);\n//   const [documentState, setDocumentState] = useState<DocumentState | null>(null);\n//   const [currentUser, setCurrentUser] = useState<User | null>(null);\n//   const [users, setUsers] = useState<User[]>([]);\n//   const [messages, setMessages] = useState<ChatMessage[]>([]);\n//   const [changes, setChanges] = useState<Change[]>([]);\n\n//   const connectToServer = (username: string, color: string) => {\n//     const newSocket = io('http://localhost:5001', {\n//       reconnection: true,\n//       reconnectionAttempts: 5,\n//       reconnectionDelay: 1000,\n//     });\n//     setSocket(newSocket);\n\n//     newSocket.on('connect', () => {\n//       setIsConnected(true);\n//       if (newSocket.id) {\n//         const user: User = {\n//           id: newSocket.id,\n//           name: username,\n//           color: color,\n//         };\n//         setCurrentUser(user);\n//         newSocket.emit('join', { name: username, color });\n//       } else {\n//         console.error('Socket ID is undefined on connection');\n//       }\n//     });\n\n//     newSocket.on('disconnect', () => {\n//       setIsConnected(false);\n//     });\n\n//     newSocket.on('init', (data: { document: DocumentState; messages: ChatMessage[] }) => {\n//       setDocumentState(data.document);\n//       setUsers(data.document.users);\n//       setMessages(data.messages);\n//       setChanges(data.document.changes);\n//     });\n\n//     newSocket.on('user-joined', (updatedUsers: User[]) => {\n//       setUsers(updatedUsers);\n//     });\n\n//     newSocket.on('user-left', (updatedUsers: User[]) => {\n//       setUsers(updatedUsers);\n//     });\n\n//     newSocket.on('content-change', (data: { content: string; userId: string; changeDescription: string }) => {\n//       setDocumentState(prev => (prev ? { ...prev, content: data.content } : null));\n//       setChanges(prev => [\n//         ...prev,\n//         { userId: data.userId, description: data.changeDescription, timestamp: new Date() },\n//       ].slice(-10));\n//     });\n\n//     newSocket.on('cursor-update', (data: { userId: string; position: { line: number; ch: number } }) => {\n//       setUsers(prev => {\n//         return prev.map(user => {\n//           if (user.id === data.userId) {\n//             return { ...user, cursorPosition: data.position };\n//           }\n//           return user;\n//         });\n//       });\n//     });\n\n//     newSocket.on('new-message', (message: ChatMessage) => {\n//       setMessages(prev => [...prev, message]);\n//     });\n//   };\n\n//   const updateContent = (content: string) => {\n//     if (socket && isConnected && socket.id) {\n//       socket.emit('content-change', content);\n//       setDocumentState(prev => (prev ? { ...prev, content } : null));\n//     }\n//   };\n\n//   const updateCursorPosition = (position: { line: number; ch: number }) => {\n//     if (socket && isConnected && currentUser && socket.id) {\n//       socket.emit('cursor-move', position);\n//       setCurrentUser({ ...currentUser, cursorPosition: position });\n//     }\n//   };\n\n//   const sendMessage = (text: string) => {\n//     if (socket && isConnected && text.trim()) {\n//       socket.emit('send-message', text);\n//     }\n//   };\n\n//   useEffect(() => {\n//     return () => {\n//       if (socket) {\n//         socket.disconnect();\n//       }\n//     };\n//   }, [socket]);\n\n//   return (\n//     <SocketContext.Provider\n//       value={{\n//         socket,\n//         isConnected,\n//         documentState,\n//         currentUser,\n//         users,\n//         messages,\n//         changes,\n//         connectToServer,\n//         updateContent,\n//         updateCursorPosition,\n//         sendMessage,\n//       }}\n//     >\n//       {children}\n//     </SocketContext.Provider>\n//   );\n// };\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultState = {\n  socket: null,\n  isConnected: false,\n  documentState: null,\n  currentUser: null,\n  users: [],\n  messages: [],\n  changes: [],\n  connectToServer: () => {},\n  updateContent: () => {},\n  updateCursorPosition: () => {},\n  sendMessage: () => {}\n};\nconst SocketContext = /*#__PURE__*/createContext(defaultState);\nexport const useSocket = () => {\n  _s();\n  return useContext(SocketContext);\n};\n_s(useSocket, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const SocketProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [documentState, setDocumentState] = useState(null);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [users, setUsers] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [changes, setChanges] = useState([]);\n  const connectToServer = (username, color) => {\n    const newSocket = io('http://localhost:5001', {\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n    setSocket(newSocket);\n    newSocket.on('connect', () => {\n      setIsConnected(true);\n      if (newSocket.id) {\n        const user = {\n          id: newSocket.id,\n          name: username,\n          color: color\n        };\n        setCurrentUser(user);\n        newSocket.emit('join', {\n          name: username,\n          color\n        });\n      } else {\n        console.error('Socket ID is undefined on connection');\n      }\n    });\n    newSocket.on('disconnect', () => {\n      setIsConnected(false);\n    });\n    newSocket.on('init', data => {\n      setDocumentState(data.document);\n      setUsers(data.document.users);\n      setMessages(data.messages);\n      setChanges(data.document.changes);\n      console.log('Init received:', data);\n    });\n    newSocket.on('user-joined', updatedUsers => {\n      setUsers(updatedUsers);\n    });\n    newSocket.on('user-left', updatedUsers => {\n      setUsers(updatedUsers);\n    });\n    newSocket.on('content-change', data => {\n      console.log('Content-change received:', data);\n      setDocumentState(prev => prev ? {\n        ...prev,\n        content: data.content\n      } : null);\n      setChanges(prev => {\n        const newChanges = [...prev, {\n          userId: data.userId,\n          description: data.changeDescription,\n          timestamp: new Date()\n        }].slice(-10);\n        console.log('Updated changes:', newChanges);\n        return newChanges;\n      });\n    });\n    newSocket.on('cursor-update', data => {\n      setUsers(prev => {\n        return prev.map(user => {\n          if (user.id === data.userId) {\n            return {\n              ...user,\n              cursorPosition: data.position\n            };\n          }\n          return user;\n        });\n      });\n    });\n    newSocket.on('new-message', message => {\n      setMessages(prev => [...prev, message]);\n    });\n  };\n  const updateContent = content => {\n    if (socket && isConnected && socket.id) {\n      socket.emit('content-change', content);\n      setDocumentState(prev => prev ? {\n        ...prev,\n        content\n      } : null);\n    }\n  };\n  const updateCursorPosition = position => {\n    if (socket && isConnected && currentUser && socket.id) {\n      socket.emit('cursor-move', position);\n      setCurrentUser({\n        ...currentUser,\n        cursorPosition: position\n      });\n    }\n  };\n  const sendMessage = text => {\n    if (socket && isConnected && text.trim()) {\n      socket.emit('send-message', text);\n    }\n  };\n  useEffect(() => {\n    return () => {\n      if (socket) {\n        socket.disconnect();\n      }\n    };\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      socket,\n      isConnected,\n      documentState,\n      currentUser,\n      users,\n      messages,\n      changes,\n      connectToServer,\n      updateContent,\n      updateCursorPosition,\n      sendMessage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 314,\n    columnNumber: 5\n  }, this);\n};\n_s2(SocketProvider, \"o5cUku0BZztn1yoADJQYsstUABY=\");\n_c = SocketProvider;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","jsxDEV","_jsxDEV","defaultState","socket","isConnected","documentState","currentUser","users","messages","changes","connectToServer","updateContent","updateCursorPosition","sendMessage","SocketContext","useSocket","_s","SocketProvider","children","_s2","setSocket","setIsConnected","setDocumentState","setCurrentUser","setUsers","setMessages","setChanges","username","color","newSocket","reconnection","reconnectionAttempts","reconnectionDelay","on","id","user","name","emit","console","error","data","document","log","updatedUsers","prev","content","newChanges","userId","description","changeDescription","timestamp","Date","slice","map","cursorPosition","position","message","text","trim","disconnect","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sparshs.pradhan/collaborative-editor/client/src/context/SocketContext.tsx"],"sourcesContent":["\n\n\n\n\n// import React, { createContext, useContext, useEffect, useState } from 'react';\n// import io, { Socket } from 'socket.io-client';\n// import { User, DocumentState, ChatMessage, Change } from '../types';\n\n// interface SocketContextType {\n//   socket: Socket | null;\n//   isConnected: boolean;\n//   documentState: DocumentState | null;\n//   currentUser: User | null;\n//   users: User[];\n//   messages: ChatMessage[];\n//   changes: Change[];\n//   connectToServer: (username: string, color: string) => void;\n//   updateContent: (content: string) => void;\n//   updateCursorPosition: (position: { line: number; ch: number }) => void;\n//   sendMessage: (text: string) => void;\n// }\n\n// const defaultState: SocketContextType = {\n//   socket: null,\n//   isConnected: false,\n//   documentState: null,\n//   currentUser: null,\n//   users: [],\n//   messages: [],\n//   changes: [],\n//   connectToServer: () => {},\n//   updateContent: () => {},\n//   updateCursorPosition: () => {},\n//   sendMessage: () => {},\n// };\n\n// const SocketContext = createContext<SocketContextType>(defaultState);\n\n// export const useSocket = () => useContext(SocketContext);\n\n// export const SocketProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n//   const [socket, setSocket] = useState<Socket | null>(null);\n//   const [isConnected, setIsConnected] = useState(false);\n//   const [documentState, setDocumentState] = useState<DocumentState | null>(null);\n//   const [currentUser, setCurrentUser] = useState<User | null>(null);\n//   const [users, setUsers] = useState<User[]>([]);\n//   const [messages, setMessages] = useState<ChatMessage[]>([]);\n//   const [changes, setChanges] = useState<Change[]>([]);\n\n//   const connectToServer = (username: string, color: string) => {\n//     const newSocket = io('http://localhost:5001', {\n//       reconnection: true,\n//       reconnectionAttempts: 5,\n//       reconnectionDelay: 1000,\n//     });\n//     setSocket(newSocket);\n\n//     newSocket.on('connect', () => {\n//       setIsConnected(true);\n//       if (newSocket.id) {\n//         const user: User = {\n//           id: newSocket.id,\n//           name: username,\n//           color: color,\n//         };\n//         setCurrentUser(user);\n//         newSocket.emit('join', { name: username, color });\n//       } else {\n//         console.error('Socket ID is undefined on connection');\n//       }\n//     });\n\n//     newSocket.on('disconnect', () => {\n//       setIsConnected(false);\n//     });\n\n//     newSocket.on('init', (data: { document: DocumentState; messages: ChatMessage[] }) => {\n//       setDocumentState(data.document);\n//       setUsers(data.document.users);\n//       setMessages(data.messages);\n//       setChanges(data.document.changes);\n//     });\n\n//     newSocket.on('user-joined', (updatedUsers: User[]) => {\n//       setUsers(updatedUsers);\n//     });\n\n//     newSocket.on('user-left', (updatedUsers: User[]) => {\n//       setUsers(updatedUsers);\n//     });\n\n//     newSocket.on('content-change', (data: { content: string; userId: string; changeDescription: string }) => {\n//       setDocumentState(prev => (prev ? { ...prev, content: data.content } : null));\n//       setChanges(prev => [\n//         ...prev,\n//         { userId: data.userId, description: data.changeDescription, timestamp: new Date() },\n//       ].slice(-10));\n//     });\n\n//     newSocket.on('cursor-update', (data: { userId: string; position: { line: number; ch: number } }) => {\n//       setUsers(prev => {\n//         return prev.map(user => {\n//           if (user.id === data.userId) {\n//             return { ...user, cursorPosition: data.position };\n//           }\n//           return user;\n//         });\n//       });\n//     });\n\n//     newSocket.on('new-message', (message: ChatMessage) => {\n//       setMessages(prev => [...prev, message]);\n//     });\n//   };\n\n//   const updateContent = (content: string) => {\n//     if (socket && isConnected && socket.id) {\n//       socket.emit('content-change', content);\n//       setDocumentState(prev => (prev ? { ...prev, content } : null));\n//     }\n//   };\n\n//   const updateCursorPosition = (position: { line: number; ch: number }) => {\n//     if (socket && isConnected && currentUser && socket.id) {\n//       socket.emit('cursor-move', position);\n//       setCurrentUser({ ...currentUser, cursorPosition: position });\n//     }\n//   };\n\n//   const sendMessage = (text: string) => {\n//     if (socket && isConnected && text.trim()) {\n//       socket.emit('send-message', text);\n//     }\n//   };\n\n//   useEffect(() => {\n//     return () => {\n//       if (socket) {\n//         socket.disconnect();\n//       }\n//     };\n//   }, [socket]);\n\n//   return (\n//     <SocketContext.Provider\n//       value={{\n//         socket,\n//         isConnected,\n//         documentState,\n//         currentUser,\n//         users,\n//         messages,\n//         changes,\n//         connectToServer,\n//         updateContent,\n//         updateCursorPosition,\n//         sendMessage,\n//       }}\n//     >\n//       {children}\n//     </SocketContext.Provider>\n//   );\n// };\n\n\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport io, { Socket } from 'socket.io-client';\nimport { User, DocumentState, ChatMessage, Change } from '../types';\n\ninterface SocketContextType {\n  socket: Socket | null;\n  isConnected: boolean;\n  documentState: DocumentState | null;\n  currentUser: User | null;\n  users: User[];\n  messages: ChatMessage[];\n  changes: Change[];\n  connectToServer: (username: string, color: string) => void;\n  updateContent: (content: string) => void;\n  updateCursorPosition: (position: { line: number; ch: number }) => void;\n  sendMessage: (text: string) => void;\n}\n\nconst defaultState: SocketContextType = {\n  socket: null,\n  isConnected: false,\n  documentState: null,\n  currentUser: null,\n  users: [],\n  messages: [],\n  changes: [],\n  connectToServer: () => {},\n  updateContent: () => {},\n  updateCursorPosition: () => {},\n  sendMessage: () => {},\n};\n\nconst SocketContext = createContext<SocketContextType>(defaultState);\n\nexport const useSocket = () => useContext(SocketContext);\n\nexport const SocketProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [socket, setSocket] = useState<Socket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [documentState, setDocumentState] = useState<DocumentState | null>(null);\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [users, setUsers] = useState<User[]>([]);\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [changes, setChanges] = useState<Change[]>([]);\n\n  const connectToServer = (username: string, color: string) => {\n    const newSocket = io('http://localhost:5001', {\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n    });\n    setSocket(newSocket);\n\n    newSocket.on('connect', () => {\n      setIsConnected(true);\n      if (newSocket.id) {\n        const user: User = {\n          id: newSocket.id,\n          name: username,\n          color: color,\n        };\n        setCurrentUser(user);\n        newSocket.emit('join', { name: username, color });\n      } else {\n        console.error('Socket ID is undefined on connection');\n      }\n    });\n\n    newSocket.on('disconnect', () => {\n      setIsConnected(false);\n    });\n\n    newSocket.on('init', (data: { document: DocumentState; messages: ChatMessage[] }) => {\n      setDocumentState(data.document);\n      setUsers(data.document.users);\n      setMessages(data.messages);\n      setChanges(data.document.changes);\n      console.log('Init received:', data);\n    });\n\n    newSocket.on('user-joined', (updatedUsers: User[]) => {\n      setUsers(updatedUsers);\n    });\n\n    newSocket.on('user-left', (updatedUsers: User[]) => {\n      setUsers(updatedUsers);\n    });\n\n    newSocket.on('content-change', (data: { content: string; userId: string; changeDescription: string }) => {\n      console.log('Content-change received:', data);\n      setDocumentState(prev => (prev ? { ...prev, content: data.content } : null));\n      setChanges(prev => {\n        const newChanges = [\n          ...prev,\n          { userId: data.userId, description: data.changeDescription, timestamp: new Date() },\n        ].slice(-10);\n        console.log('Updated changes:', newChanges);\n        return newChanges;\n      });\n    });\n\n    newSocket.on('cursor-update', (data: { userId: string; position: { line: number; ch: number } }) => {\n      setUsers(prev => {\n        return prev.map(user => {\n          if (user.id === data.userId) {\n            return { ...user, cursorPosition: data.position };\n          }\n          return user;\n        });\n      });\n    });\n\n    newSocket.on('new-message', (message: ChatMessage) => {\n      setMessages(prev => [...prev, message]);\n    });\n  };\n\n  const updateContent = (content: string) => {\n    if (socket && isConnected && socket.id) {\n      socket.emit('content-change', content);\n      setDocumentState(prev => (prev ? { ...prev, content } : null));\n    }\n  };\n\n  const updateCursorPosition = (position: { line: number; ch: number }) => {\n    if (socket && isConnected && currentUser && socket.id) {\n      socket.emit('cursor-move', position);\n      setCurrentUser({ ...currentUser, cursorPosition: position });\n    }\n  };\n\n  const sendMessage = (text: string) => {\n    if (socket && isConnected && text.trim()) {\n      socket.emit('send-message', text);\n    }\n  };\n\n  useEffect(() => {\n    return () => {\n      if (socket) {\n        socket.disconnect();\n      }\n    };\n  }, [socket]);\n\n  return (\n    <SocketContext.Provider\n      value={{\n        socket,\n        isConnected,\n        documentState,\n        currentUser,\n        users,\n        messages,\n        changes,\n        connectToServer,\n        updateContent,\n        updateCursorPosition,\n        sendMessage,\n      }}\n    >\n      {children}\n    </SocketContext.Provider>\n  );\n};"],"mappings":";;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7E,OAAOC,EAAE,MAAkB,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAiB9C,MAAMC,YAA+B,GAAG;EACtCC,MAAM,EAAE,IAAI;EACZC,WAAW,EAAE,KAAK;EAClBC,aAAa,EAAE,IAAI;EACnBC,WAAW,EAAE,IAAI;EACjBC,KAAK,EAAE,EAAE;EACTC,QAAQ,EAAE,EAAE;EACZC,OAAO,EAAE,EAAE;EACXC,eAAe,EAAEA,CAAA,KAAM,CAAC,CAAC;EACzBC,aAAa,EAAEA,CAAA,KAAM,CAAC,CAAC;EACvBC,oBAAoB,EAAEA,CAAA,KAAM,CAAC,CAAC;EAC9BC,WAAW,EAAEA,CAAA,KAAM,CAAC;AACtB,CAAC;AAED,MAAMC,aAAa,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}