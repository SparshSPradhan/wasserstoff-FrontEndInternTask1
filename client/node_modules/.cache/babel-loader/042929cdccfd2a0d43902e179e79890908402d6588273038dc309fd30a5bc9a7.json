{"ast":null,"code":"var _jsxFileName = \"/Users/sparshs.pradhan/collaborative-editor/client/src/components/CursorOverlay.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useSocket } from '../context/SocketContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CursorOverlay = ({\n  editorRef\n}) => {\n  _s();\n  const {\n    users,\n    currentUser\n  } = useSocket();\n\n  // Filter out the current user and users without cursor positions\n  const remoteCursors = users.filter(user => user.id !== (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) && user.cursorPosition);\n  if (!editorRef.current || remoteCursors.length === 0) return null;\n\n  // Calculate line height based on editor styles\n  const computedStyle = window.getComputedStyle(editorRef.current);\n  const lineHeight = parseInt(computedStyle.lineHeight) || 20;\n  const fontSize = parseInt(computedStyle.fontSize) || 16;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cursor-overlay\",\n    children: remoteCursors.map(user => {\n      if (!user.cursorPosition) return null;\n\n      // Position cursor at the right location\n      const top = user.cursorPosition.line * lineHeight;\n      const left = user.cursorPosition.ch * (fontSize * 0.6); // Approximate character width\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"remote-cursor\",\n        style: {\n          top,\n          left\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cursor-caret\",\n          style: {\n            backgroundColor: user.color\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cursor-flag\",\n          style: {\n            backgroundColor: user.color\n          },\n          children: user.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this)]\n      }, user.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(CursorOverlay, \"IfJOByGNMNOdHrLPFCC9aOZXU74=\", false, function () {\n  return [useSocket];\n});\n_c = CursorOverlay;\nexport default CursorOverlay;\n\n// import React from 'react';\n// import { useSocket } from '../context/SocketContext';\n// import { User } from '../types';\n\n// interface CursorOverlayProps {\n//   editorRef: React.RefObject<HTMLDivElement>;\n// }\n\n// const CursorOverlay: React.FC<CursorOverlayProps> = ({ editorRef }) => {\n//   const { users, currentUser } = useSocket();\n\n//   // Filter out the current user and users without cursor positions\n//   const remoteCursors = users.filter(\n//     (user) => user.id !== currentUser?.id && user.cursorPosition\n//   );\n\n//   if (!editorRef.current || remoteCursors.length === 0) return null;\n\n//   // Calculate line height based on editor styles\n//   const computedStyle = window.getComputedStyle(editorRef.current);\n//   const lineHeight = parseInt(computedStyle.lineHeight) || 20;\n//   const fontSize = parseInt(computedStyle.fontSize) || 16;\n\n//   return (\n//     <div className=\"cursor-overlay\">\n//       {remoteCursors.map((user: User) => {\n//         if (!user.cursorPosition) return null;\n\n//         // Position cursor at the right location\n//         const top = user.cursorPosition.line * lineHeight;\n//         const left = user.cursorPosition.ch * (fontSize * 0.6); // Approximate character width\n\n//         return (\n//           <div key={user.id} className=\"remote-cursor\" style={{ top, left }}>\n//             <div className=\"cursor-caret\" style={{ backgroundColor: user.color }}></div>\n//             <div className=\"cursor-flag\" style={{ backgroundColor: user.color }}>\n//               {user.name}\n//             </div>\n//           </div>\n//         );\n//       })}\n//     </div>\n//   );\n// };\n\n// export default CursorOverlay;\nvar _c;\n$RefreshReg$(_c, \"CursorOverlay\");","map":{"version":3,"names":["React","useSocket","jsxDEV","_jsxDEV","CursorOverlay","editorRef","_s","users","currentUser","remoteCursors","filter","user","id","cursorPosition","current","length","computedStyle","window","getComputedStyle","lineHeight","parseInt","fontSize","className","children","map","top","line","left","ch","style","backgroundColor","color","fileName","_jsxFileName","lineNumber","columnNumber","name","_c","$RefreshReg$"],"sources":["/Users/sparshs.pradhan/collaborative-editor/client/src/components/CursorOverlay.tsx"],"sourcesContent":["import React from 'react';\nimport { useSocket } from '../context/SocketContext';\nimport { User } from '../types';\n\ninterface CursorOverlayProps {\n  editorRef: React.RefObject<HTMLDivElement>;\n}\n\nconst CursorOverlay: React.FC<CursorOverlayProps> = ({ editorRef }) => {\n  const { users, currentUser } = useSocket();\n  \n  // Filter out the current user and users without cursor positions\n  const remoteCursors = users.filter(\n    (user) => user.id !== currentUser?.id && user.cursorPosition\n  );\n\n  if (!editorRef.current || remoteCursors.length === 0) return null;\n\n  // Calculate line height based on editor styles\n  const computedStyle = window.getComputedStyle(editorRef.current);\n  const lineHeight = parseInt(computedStyle.lineHeight) || 20;\n  const fontSize = parseInt(computedStyle.fontSize) || 16;\n  \n  return (\n    <div className=\"cursor-overlay\">\n      {remoteCursors.map((user: User) => {\n        if (!user.cursorPosition) return null;\n        \n        // Position cursor at the right location\n        const top = user.cursorPosition.line * lineHeight;\n        const left = user.cursorPosition.ch * (fontSize * 0.6); // Approximate character width\n        \n        return (\n          <div key={user.id} className=\"remote-cursor\" style={{ top, left }}>\n            <div className=\"cursor-caret\" style={{ backgroundColor: user.color }}></div>\n            <div className=\"cursor-flag\" style={{ backgroundColor: user.color }}>\n              {user.name}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CursorOverlay;\n\n\n\n// import React from 'react';\n// import { useSocket } from '../context/SocketContext';\n// import { User } from '../types';\n\n// interface CursorOverlayProps {\n//   editorRef: React.RefObject<HTMLDivElement>;\n// }\n\n// const CursorOverlay: React.FC<CursorOverlayProps> = ({ editorRef }) => {\n//   const { users, currentUser } = useSocket();\n  \n//   // Filter out the current user and users without cursor positions\n//   const remoteCursors = users.filter(\n//     (user) => user.id !== currentUser?.id && user.cursorPosition\n//   );\n\n//   if (!editorRef.current || remoteCursors.length === 0) return null;\n\n//   // Calculate line height based on editor styles\n//   const computedStyle = window.getComputedStyle(editorRef.current);\n//   const lineHeight = parseInt(computedStyle.lineHeight) || 20;\n//   const fontSize = parseInt(computedStyle.fontSize) || 16;\n  \n//   return (\n//     <div className=\"cursor-overlay\">\n//       {remoteCursors.map((user: User) => {\n//         if (!user.cursorPosition) return null;\n        \n//         // Position cursor at the right location\n//         const top = user.cursorPosition.line * lineHeight;\n//         const left = user.cursorPosition.ch * (fontSize * 0.6); // Approximate character width\n        \n//         return (\n//           <div key={user.id} className=\"remote-cursor\" style={{ top, left }}>\n//             <div className=\"cursor-caret\" style={{ backgroundColor: user.color }}></div>\n//             <div className=\"cursor-flag\" style={{ backgroundColor: user.color }}>\n//               {user.name}\n//             </div>\n//           </div>\n//         );\n//       })}\n//     </div>\n//   );\n// };\n\n// export default CursorOverlay;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOrD,MAAMC,aAA2C,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACrE,MAAM;IAAEC,KAAK;IAAEC;EAAY,CAAC,GAAGP,SAAS,CAAC,CAAC;;EAE1C;EACA,MAAMQ,aAAa,GAAGF,KAAK,CAACG,MAAM,CAC/BC,IAAI,IAAKA,IAAI,CAACC,EAAE,MAAKJ,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEI,EAAE,KAAID,IAAI,CAACE,cAChD,CAAC;EAED,IAAI,CAACR,SAAS,CAACS,OAAO,IAAIL,aAAa,CAACM,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;;EAEjE;EACA,MAAMC,aAAa,GAAGC,MAAM,CAACC,gBAAgB,CAACb,SAAS,CAACS,OAAO,CAAC;EAChE,MAAMK,UAAU,GAAGC,QAAQ,CAACJ,aAAa,CAACG,UAAU,CAAC,IAAI,EAAE;EAC3D,MAAME,QAAQ,GAAGD,QAAQ,CAACJ,aAAa,CAACK,QAAQ,CAAC,IAAI,EAAE;EAEvD,oBACElB,OAAA;IAAKmB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,EAC5Bd,aAAa,CAACe,GAAG,CAAEb,IAAU,IAAK;MACjC,IAAI,CAACA,IAAI,CAACE,cAAc,EAAE,OAAO,IAAI;;MAErC;MACA,MAAMY,GAAG,GAAGd,IAAI,CAACE,cAAc,CAACa,IAAI,GAAGP,UAAU;MACjD,MAAMQ,IAAI,GAAGhB,IAAI,CAACE,cAAc,CAACe,EAAE,IAAIP,QAAQ,GAAG,GAAG,CAAC,CAAC,CAAC;;MAExD,oBACElB,OAAA;QAAmBmB,SAAS,EAAC,eAAe;QAACO,KAAK,EAAE;UAAEJ,GAAG;UAAEE;QAAK,CAAE;QAAAJ,QAAA,gBAChEpB,OAAA;UAAKmB,SAAS,EAAC,cAAc;UAACO,KAAK,EAAE;YAAEC,eAAe,EAAEnB,IAAI,CAACoB;UAAM;QAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC5EhC,OAAA;UAAKmB,SAAS,EAAC,aAAa;UAACO,KAAK,EAAE;YAAEC,eAAe,EAAEnB,IAAI,CAACoB;UAAM,CAAE;UAAAR,QAAA,EACjEZ,IAAI,CAACyB;QAAI;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACP,CAAC;MAAA,GAJExB,IAAI,CAACC,EAAE;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKZ,CAAC;IAEV,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC7B,EAAA,CAnCIF,aAA2C;EAAA,QAChBH,SAAS;AAAA;AAAAoC,EAAA,GADpCjC,aAA2C;AAqCjD,eAAeA,aAAa;;AAI5B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}